/*
 * Copyright (c) 2012, The Johns Hopkins University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of The Johns Hopkins University. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import("controllerman_controllers")

import("kdl_typekit")

import("rtt_sensor_msgs")
import("rtt_trajectory_msgs")
import("rtt_geometry_msgs")
import("rtt_cartesian_trajectory_msgs")
import("rtt_controllerman_msgs")

// Set up TF
import("rtt_tf")
loadComponent("tf","rtt_tf::RTT_TF")
tf.configure()
tf.start()

//*****************************************************************************
// Create multiplexer 
loadComponent("wam_mux","controllerman_controllers::ControllerMux")
setActivity("wam_mux",0,HighestPriority,ORO_SCHED_RT)
stream("wam_mux.joint_state_out", ros.topic("wam_rtt/wam_mux/joint_states")) 

//*****************************************************************************
// Create trivial controller 
loadComponent("wam_trivial","controllerman_controllers::controllers::Trivial")
setActivity("wam_trivial",0,HighestPriority,ORO_SCHED_RT)

//*****************************************************************************
// Create gravity controller 
loadComponent("wam_grav","controllerman_controllers::controllers::GravityCompensation")
setActivity("wam_grav",0,HighestPriority,ORO_SCHED_RT)

//*****************************************************************************
// Create cartesian wrench controller 
loadComponent("wam_wrench","controllerman_controllers::controllers::CartesianWrench")
setActivity("wam_wrench",0,HighestPriority,ORO_SCHED_RT)
connectPeers("tf","wam_wrench")

//*****************************************************************************
// Create cartesian pose  controller
loadComponent("wam_pose","controllerman_controllers::controllers::CartesianPose")
setActivity("wam_pose",1.0,HighestPriority,ORO_SCHED_RT)
connectPeers("tf","wam_pose")
stream("wam_pose.trajectories_out",ros.topic("wam_rtt/wam_pose/trajectories_out")) 

//*****************************************************************************
// Create trajectory dispatcher (sync & async)
loadComponent("wam_joint_traj","controllerman_controllers::TrajectoryDispatcher")
setActivity("wam_joint_traj",0,HighestPriority,ORO_SCHED_RT)
connectPeers("tf","wam_joint_traj")
stream("wam_joint_traj.trajectories_in",ros.topic("wam_rtt/wam_joint_traj/trajectories")) 

//*****************************************************************************
// Create joint PID controller 
loadComponent("wam_joint_pid","controllerman_controllers::controllers::JointPID")
setActivity("wam_joint_pid",0,HighestPriority,ORO_SCHED_RT)
stream("wam_joint_pid.joint_state_out", ros.topic("wam_rtt/wam_joint_pid/joint_states")) 

//*****************************************************************************
// Configure components
wam_mux.configure()

wam_trivial.configure()
wam_joint_pid.configure()
wam_grav.configure()
wam_wrench.configure()
wam_pose.configure()
wam_joint_traj.configure()

//*****************************************************************************
// Load controllers into mux
wam_mux.load("pose")
wam_mux.load("wrench")
wam_mux.load("trivial")
wam_mux.load("gravity")
wam_mux.load("joint_pid")

// Connect controllers 
connect("wam_grav.torques_out","wam_mux.gravity",ConnPolicy())
connect("wam_pose.torques_out","wam_mux.pose",ConnPolicy())
connect("wam_wrench.torques_out","wam_mux.wrench",ConnPolicy())
connect("wam_trivial.torques_out","wam_mux.trivial",ConnPolicy())
connect("wam_joint_pid.torques_out","wam_mux.joint_pid",ConnPolicy())
connect("wam_joint_traj.positions_out","wam_joint_pid.positions_des_in",ConnPolicy())
connect("wam_joint_traj.trajectories_in","wam_pose.trajectories_out",ConnPolicy())
//connect("wam_pose.positions_out","wam_joint_pid.positions_des_in",ConnPolicy())

//*****************************************************************************
// Start the controllers
//wam_grav.start()

//wam_pose.start()
//wam_joint_traj.start()
//wam_joint_pid.start()
//wam_wrench.start()

// Start the multiplexer
//wam_mux.disable()
//wam_mux.start()
//wam_mux.toggleControllers(strings("gravity"),strings())
//wam_mux.toggleControllers(strings("joint_pid"),strings())
//wam_mux.toggleControllers(strings("pose"),strings())
//wam_mux.toggleControllers(strings("trivial"),strings("gravity"))
//wam_mux.toggleControllers(strings("gravity"),strings("trivial"))
